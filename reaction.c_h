#include "pintos_thread.h"

// Forward declaration. This function is implemented in reaction-runner.c,
// but you needn't care what it does. Just be sure it's called when
// appropriate within reaction_o()/reaction_h().
void make_water();

struct reaction {
  int num_H;
  int num_O;
  struct lock lock;
  struct condition make_water_O;
  struct condition make_water_H;
  struct condition O_ready;
	// FILL ME IN
};

void
reaction_init(struct reaction *reaction)
{
  reaction->num_H = 0;
  reaction->num_O = 0;
  lock_init(&reaction->lock);
  cond_init(&reaction->make_water_O);
  cond_init(&reaction->make_water_H);
  cond_init(&reaction->O_ready);
	// FILL ME IN
}

void
reaction_h(struct reaction *reaction)
{
  lock_acquire(& reaction->lock);
  reaction->num_H++;
  if(reaction->num_H%2==1)
  {
    cond_wait(&reaction->make_water_H, &reaction->lock);
  }
  else
  {
    if(reaction->num_O==2)
      cond_wait(&reaction->O_ready, &reaction->lock);
    make_water();
    cond_signal(&reaction->make_water_H, &reaction->lock);
    cond_signal(&reaction->make_water_O, &reaction->lock);
  }
  lock_release(&reaction->lock);
	// FILL ME IN
}

void
reaction_o(struct reaction *reaction)
{
  lock_acquire(& reaction->lock);
  reaction->num_O ++;
  cond_wait(&reaction->make_water_O, &reaction->lock);

  lock_release(&reaction->lock);
  //printf("reaction_o %d %d \n",reaction->num_H,reaction->num_O);

	// FILL ME IN
}
