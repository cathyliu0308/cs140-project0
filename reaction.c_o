#include "pintos_thread.h"

// Forward declaration. This function is implemented in reaction-runner.c,
// but you needn't care what it does. Just be sure it's called when
// appropriate within reaction_o()/reaction_h().
void make_water();

struct reaction {
  int num_H;
  int num_O;
  struct lock lock;
  struct condition H_ready;
  struct condition water;

	// FILL ME IN
};

void
reaction_init(struct reaction *reaction)
{
  reaction->num_H = 0;
  reaction->num_O = 0;
  lock_init(&reaction->lock);
  cond_init(&reaction->H_ready);
  cond_init(&reaction->water);

	// FILL ME IN
}

void
reaction_h(struct reaction *reaction)
{
  lock_acquire(& reaction->lock);
 // while ((reaction->num_O *2 > reaction->num_H) ||( reaction->num_H == 0))
 // {
  reaction->num_H++;
 //}
//  cond_wait(&reaction->water, &reaction->lock);
  if(reaction->num_H>=2)
    cond_signal(&reaction->H_ready, &reaction->lock);
  cond_wait(&reaction->water, &reaction->lock);
  lock_release(&reaction->lock);
  printf("reaction_h %d %d \n",reaction->num_H,reaction->num_O);
	// FILL ME IN
}

void
reaction_o(struct reaction *reaction)
{
  lock_acquire(& reaction->lock);
  //while ((reaction->num_O *2 < reaction->num_H) || (reaction->num_O == 0))
//  {
  reaction->num_O ++;
//  }
  //while (reaction->num_H < 2)
  if (reaction->num_H < 2)
  {
    cond_wait(&reaction->H_ready, &reaction->lock);
  }
  make_water();
  reaction->num_O = reaction->num_O - 1;
  reaction->num_H = reaction->num_H - 2;
//    cond_signal(&reaction->water, &reaction->lock);

  cond_signal(&reaction->water, &reaction->lock);
  cond_signal(&reaction->water, &reaction->lock);
  lock_release(&reaction->lock);
  printf("reaction_o %d %d \n",reaction->num_H,reaction->num_O);

	// FILL ME IN
}
